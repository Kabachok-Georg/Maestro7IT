'''
Task
You will be given an array of numbers. You have to sort the odd numbers in ascending order while leaving the even numbers at their original positions.

Examples
[7, 1]  =>  [1, 7]
[5, 8, 6, 3, 4]  =>  [3, 8, 6, 5, 4]
[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]  =>  [1, 8, 3, 6, 5, 4, 7, 2, 9, 0]


def sort_array(source_array):
    pass
'''


def sort_array(source_array):
    # Извлечение нечетных чисел из исходного массива
    odds = [x for x in source_array if x % 2 != 0]

    # Сортировка списка нечетных чисел
    odds.sort()

    # Итератор для отсортированных нечетных чисел
    odd_iter = iter(odds)

    # Воссоздание массива с отсортированными нечетными числами на местах
    sorted_array = [next(odd_iter) if x % 2 != 0 else x for x in source_array]

    return sorted_array

'''
[Объяснениe]

Извлечение нечетных чисел:
    Используем генератор списка для сбора всех нечетных чисел из source_array.

Сортировка нечетных чисел:
    Сортируем список нечетных чисел с помощью метода sort().

Воссоздание массива:
    Используем другой генератор списка для создания окончательного массива. Для каждого элемента в source_array заменяем нечетные числа на отсортированные (используя итератор для извлечения следующего отсортированного нечетного числа) и оставляем четные числа без изменений.

[Примеры]
Для входного массива [7, 1] функция извлекает [7, 1], сортирует его в [1, 7] и воссоздает массив как [1, 7].
Для входного массива [5, 8, 6, 3, 4] функция извлекает [5, 3], сортирует его в [3, 5] и воссоздает массив как [3, 8, 6, 5, 4].
Для входного массива [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] функция извлекает [9, 7, 5, 3, 1], сортирует его в [1, 3, 5, 7, 9] и воссоздает массив как [1, 8, 3, 6, 5, 4, 7, 2, 9, 0].

Этот подход обеспечивает правильную сортировку нечетных чисел при сохранении четных чисел на их оригинальных позициях.
'''

'''
[Другой пример]

def sort_array(arr):
  odds = sorted((x for x in arr if x%2 != 0), reverse=True)
  return [x if x%2==0 else odds.pop() for x in arr]
'''